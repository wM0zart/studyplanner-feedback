class FeedbacksController < ApplicationController
	# Фильтр "before" предназначен для проверки каких-либо параметров, прежде чем будет 
	# выполнен какой-либо экшн.
	
	# Данный фильтр предназначен для проверкм авторизован ли пользователь на сайте. Хэлпер 
	# authenticate_user - является встроенным хэлпером гема Devise и позволяет получить доступ
	# к данным текущего пользователя. Хэлпр except предназначен для исключения определенных экшнов
	# из данного фильтра, т.е. для выполнения всех экшнов данного контроллера пользователь должен
	# сначала авторизоваться, исключение составляют экшны show и index.
	before_action :authenticate_user!, :except => [:show, :index]
	
	# Данный фильтр предназначен для экшнов edit, update, show и destroy и требует выполнения экшна
	# set_feedback, в котором происходит проверка strong parametr (строгих параметров, т.е. параметров,
	# которые разрешены для отправки пользователем)
	before_action :set_feedback, only: [:edit, :update, :show, :destroy]
	
	# Следующий фильтр предназначен для проверки прав пользователя на работу с данным объектом.
	before_action :require_same_user, only: [:edit, :update,  :destroy]
	
	# Экшн направляющий на feedback/index.rgb.html (страницу со всеми отзывами)
	# Он создает переменную @feedbacks, в которую записывает все отзывы пользователей @feedbacks = Feedback
	# Feedback.paginate(page: params[:page], per_page: 4) - данный метод нужен для пагинации данных, т.е. 
	# показ ограниченного количества объектов на странице, в данном случает показывается 4 отзыва на страницу
	def index
		@feedbacks = Feedback.paginate(page: params[:page], per_page: 4)
	end

	# Данный экшн предназначен для отображения информации от отзыве. Выполняется при переходе по URL: /feedback/1
	def show		
	end
	
	# Данный экшн предназначен для отображения страницы добавления нового отзыва. Создается переменная в которую записывается
	# экземпляр класса Feedback (пустой)
	def new
		@feedback = Feedback.new
	end
	
	# Данный экшн предназначен для перенаправленя на страницу редактирования отзыва
	def edit
	end

	# Данный метод создает новый отзыв.
	
	def create
		# Сначала мы получаем текущего пользователя с помощью хэлпера current_user
 		@user = current_user
		# Далее, пользуясь свойством связи между моделью User и Feedback, создается отзыв, принадлежащий текущему
		# пользователю. При этом в метод create передаются обязательные параметры, которые проверяются в методе 
		# feedback_params
    		@feedback = @user.feedbacks.create(feedback_params)
    		# Если отзыв был создан (успешна пройдена валидация)
		if @feedback.save
			# То показать сообщение
			flash[:success] = "Ваш отзыв успешно отправлен"
			# и перенаправить на струницу созданного отзыва
			redirect_to @feedback
		else 	
			# Иначе произошла какая-то ошибка и отзыв не был сохранен. Тогда отправить пользователя
			# на страницу добавления отзыва. 
			render 'new'
		end
	end

	# Метод для обновления данных об отзыве
	def update 
		# Вызывается метод update, в который передаются текущие параметры и проверяются на соответствие 
		# обязательным параметрам в методе feedback_params
		if @feedback.update(feedback_params)
			# Если все прошло успешно, то показать сообщение пользователю
			flash[:success] = "Ваш отзыв успешно обновлен"
			# И отправить его на страницу с информацией об этом отзыве
			redirect_to @feedback
		else
			# Иначе вновь отправить на страницу редактирования отзыва (feedback/edit/rgb/html)
			render 'edit'
		end
	end

	# Метод для удаления отзыва
	def destroy
		# Вызывается метод для уничтожения данного отзыва
		@feedback.destroy
		# Если все прошло успешно, то показать сообщение пользователю
		flash[:danger] = "Ваш отзыв удален"
		# И отправить его на страницу со всеми отзывами
		redirect_to feedbacks_path
	end
	
	# Метод для проверки прав пользователя на проверку доступа к работе с текущим отзывом
	def require_same_user
		# С помощью хэлпера current_user получаем текущего пользователя
		# этот объект должен быть равен объеекту User полученному с помощью @feedback.user
		# Хэлпр current_user.admin? проверяет поле admin объекта User, оно должго быть равно 1
		if current_user != @feedback.user and !current_user.admin?
			# Соосбщить пользователю ошибку
			flash[:danger] = "Недостаточно прав для выполнения данной операции"
			# Отправить пользователя на главную страницу сайта
			redirect_to root_path
		end
	end
	
	# Метод для получения информации о текущем отзыве. 
	# Получение информации происходит в экшнах edit, update, show, destroy, но чтобы сократить количество кода, 
	# данная проверка вынесена в отдельный метод и вызывается в фильте before_action
	def set_feedback
		# При переходе пользователя на страницу feedback/1 в контроллер передается параметр id этого отзыва
		# Далее происходит поиск в БД данного отзыва по id
		@feedback = Feedback.find(params[:id])
	end

	# Метод для проверки обязательных параметров (strong parametrs)
	# В целях безопасности редактирование отзывов разрешено только тем пользователям,
	# котороые создали этот отзыв или являются администраторами
	# Метод часто делают private (это уже не связано с массовым назначением), чтобы убедиться, что он не может быть 
	# вызван вне предназначенного контекста
	private
	def feedback_params
		params.require(:feedback).permit(:user, :typefeedback, :title, :description, tag_ids: [])
	end
end
